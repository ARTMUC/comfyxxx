name: Build ComfyUI and Push to ECR

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag (default: latest)'
        required: false
        default: 'latest'
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'src/**'
      - 'scripts/**'
      - '.github/workflows/**'

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: comfyui-wan

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # GitHub GPU runner
    environment: AWS_ACCESS_KEY_ID
    timeout-minutes: 120  # 2 hours for large downloads

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check GPU availability
      run: |
        echo "üîç Checking GPU setup..."
        nvidia-smi || echo "‚ö†Ô∏è  No GPU detected, but continuing..."
        docker --version
        echo "‚úÖ Environment ready"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=git-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          HUGGINGFACE_ACCESS_TOKEN=${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image details
      run: |
        echo "üéâ Build completed successfully!"
        echo ""
        echo "üìã Image details:"
        echo "Registry: ${{ steps.login-ecr.outputs.registry }}"
        echo "Repository: ${{ env.ECR_REPOSITORY }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo ""
        echo "üöÄ Use this image URI in RunPod:"
        echo "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"

    - name: Test image (optional)
      if: false  # Set to true if you want to test the built image
      run: |
        echo "üß™ Testing built image..."
        docker run --rm ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest python --version
        echo "‚úÖ Image test completed"